//===----------------------------------------------------------------------===//
//
// Part of libcu++, the C++ Standard Library for your entire system,
// under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//

#ifndef __cuda_for_dali_std__
#define __cuda_for_dali_std__

#ifdef __CUDACC__
    #if defined(__clang__)
        #include <cuda_fp16.h>
        #define __fp16 __half
    #endif
    #if defined(__FLT16_MANT_DIG__)
        #include <cuda_fp16.h>
        #define _Float16 __half
    #endif
    #define _LIBCUDAFORDALICXX_CUDACC_VER_MAJOR __CUDACC_VER_MAJOR__
    #define _LIBCUDAFORDALICXX_CUDACC_VER_MINOR __CUDACC_VER_MINOR__
    #define _LIBCUDAFORDALICXX_CUDACC_VER_BUILD __CUDACC_VER_BUILD__
    #define _LIBCUDAFORDALICXX_CUDACC_VER                                                  \
        _LIBCUDAFORDALICXX_CUDACC_VER_MAJOR * 10000 + _LIBCUDAFORDALICXX_CUDACC_VER_MINOR * 1000 + \
        _LIBCUDAFORDALICXX_CUDACC_VER_BUILD

    #define _LIBCUDAFORDALICXX_HAS_NO_LONG_DOUBLE
#else
    #ifndef __host__
        #define __host__
    #endif
    #ifndef __device__
        #define __device__
    #endif
    #ifndef __forceinline__
        #define __forceinline__
    #endif
#endif

#ifdef _MSC_VER
    #undef __cpp_lib_transparent_operators
#endif

// request these outcomes
#define _LIBCUDAFORDALICXX_NO_AUTO_LINK
#ifndef _LIBCUDAFORDALICXX_NO_EXCEPTIONS
    #define _LIBCUDAFORDALICXX_NO_EXCEPTIONS
#endif
#ifndef _LIBCUDAFORDALICXX_NO_RTTI
    #define _LIBCUDAFORDALICXX_NO_RTTI
#endif
// Disable the nodebug type
#ifndef _LIBCUDAFORDALICXX_NODEBUG_TYPE
    #define _LIBCUDAFORDALICXX_NODEBUG_TYPE
#endif

#if defined(__CUDACC_RTC__)
#  if defined(__CUDACC_RTC_INT128__)
#    define __SIZEOF_INT128__ 16 // This macro is required in order to use int128 within the library
#  else
#    define _LIBCUDAFORDALICXX_HAS_NO_INT128
#  endif
#endif

#if defined(_LIBCUDAFORDALICXX_COMPILER_MSVC) || (defined(_LIBCUDAFORDALICXX_CUDACC_VER) && (_LIBCUDAFORDALICXX_CUDACC_VER < 1105000))
#  define _LIBCUDAFORDALICXX_HAS_NO_INT128
#endif

#define _LIBCUDAFORDALICXX_FREESTANDING
#define _LIBCUDAFORDALICXX_HAS_NO_THREAD_CONTENTION_TABLE
#define _LIBCUDAFORDALICXX_HAS_NO_PLATFORM_WAIT
#define _LIBCUDAFORDALICXX_HAS_NO_MONOTONIC_CLOCK
#define _LIBCUDAFORDALICXX_HAS_NO_TREE_BARRIER
#ifdef __CUDACC_RTC__
    #define __ELF__
    #define _LIBCUDAFORDALICXX_DISABLE_PRAGMA_GCC_SYSTEM_HEADER
    #define _LIBCUDAFORDALICXX_HAS_THREAD_API_EXTERNAL
    #define __alignof(x) alignof(x)
    #define _LIBCUDAFORDALICXX_LITTLE_ENDIAN
    #define _LIBCUDAFORDALICXX_DISABLE_VISIBILITY_ANNOTATIONS
    #define _LIBCUDAFORDALICXX_HAS_NO_PRAGMA_PUSH_POP_MACRO
#endif
#define _LIBCUDAFORDALICXX_HAS_EXTERNAL_ATOMIC_IMP
#define _LIBCUDAFORDALICXX_ATOMIC_ALWAYS_LOCK_FREE(size, ptr) (size <= 8)

#define _LIBCUDAFORDALICXX_SYS_CLOCK_DURATION nanoseconds

#if defined(__PGIC__) && defined(__linux__)
    #define __ELF__
#endif

#define _LIBCUDAFORDALICXX_HAS_CUDA_ATOMIC_EXT

#include "libcxx/include/__config"

#if defined(__CUDA_ARCH__)
    #define _LIBCUDAFORDALICXX_HAS_THREAD_API_CUDA
#elif defined(_LIBCUDAFORDALICXX_COMPILER_MSVC)
    #define _LIBCUDAFORDALICXX_HAS_THREAD_API_WIN32
#endif

#if _GNUC_VER <= 409
    #define _LIBCUDAFORDALICXX_CUDA_HAS_NO_HOST_STD_ATOMIC_INIT
#endif

// force this outcome
#undef _LIBCUDAFORDALICXX_ATOMIC_FLAG_TYPE
#define _LIBCUDAFORDALICXX_ATOMIC_FLAG_TYPE int
#undef _LIBCUDAFORDALICXX_INLINE_VISIBILITY
#define _LIBCUDAFORDALICXX_INLINE_VISIBILITY __host__ __device__
#undef _LIBCUDAFORDALICXX_FUNC_VIS
#define _LIBCUDAFORDALICXX_FUNC_VIS _LIBCUDAFORDALICXX_INLINE_VISIBILITY
#undef _LIBCUDAFORDALICXX_TYPE_VIS
#define _LIBCUDAFORDALICXX_TYPE_VIS

#ifndef _LIBCUDAFORDALICXX_ABI_UNSTABLE
#  define _LIBCUDAFORDALICXX_ABI_UNSTABLE
#endif

#define _LIBCUDAFORDALICXX_CUDA_API_VERSION 001007000

#define _LIBCUDAFORDALICXX_CUDA_API_VERSION_MAJOR \
  (_LIBCUDAFORDALICXX_CUDA_API_VERSION / 1000000)

#define _LIBCUDAFORDALICXX_CUDA_API_VERSION_MINOR \
  (_LIBCUDAFORDALICXX_CUDA_API_VERSION / 1000 % 1000)

#define _LIBCUDAFORDALICXX_CUDA_API_VERSION_PATCH \
  (_LIBCUDAFORDALICXX_CUDA_API_VERSION % 1000)

#ifndef _LIBCUDAFORDALICXX_CUDA_ABI_VERSION_LATEST
#  define _LIBCUDAFORDALICXX_CUDA_ABI_VERSION_LATEST 4
#endif

#ifdef _LIBCUDAFORDALICXX_CUDA_ABI_VERSION
#  if _LIBCUDAFORDALICXX_CUDA_ABI_VERSION != 2 && _LIBCUDAFORDALICXX_CUDA_ABI_VERSION != 3 && _LIBCUDAFORDALICXX_CUDA_ABI_VERSION != 4
#    error Unsupported libcu++ ABI version requested. Please define _LIBCUDAFORDALICXX_CUDA_ABI_VERSION to either 2 or 3.
#  endif
#else
#  define _LIBCUDAFORDALICXX_CUDA_ABI_VERSION _LIBCUDAFORDALICXX_CUDA_ABI_VERSION_LATEST
#endif

#ifdef _LIBCUDAFORDALICXX_PIPELINE_ASSUMED_ABI_VERSION
#  if _LIBCUDAFORDALICXX_PIPELINE_ASSUMED_ABI_VERSION != _LIBCUDAFORDALICXX_CUDA_ABI_VERSION
#    error cuda_pipeline.h has assumed a different libcu++ ABI version than provided by this library. To fix this, please include a libcu++ header before including cuda_pipeline.h, or upgrade to a version of the toolkit this version of libcu++ shipped in.
#  endif
#endif

#ifndef _LIBCUDAFORDALICXX_CUDA_ABI_NAMESPACE
#  define _LIBCUDAFORDALICXX_CUDA_ABI_NAMESPACE _LIBCUDAFORDALICXX_CONCAT(__,_LIBCUDAFORDALICXX_CUDA_ABI_VERSION)
#endif

#ifndef _LIBCUDAFORDALICXX_BEGIN_NAMESPACE_CUDA
#  define _LIBCUDAFORDALICXX_BEGIN_NAMESPACE_CUDA \
      namespace cuda_for_dali { inline namespace _LIBCUDAFORDALICXX_CUDA_ABI_NAMESPACE {
#endif
#ifndef _LIBCUDAFORDALICXX_END_NAMESPACE_CUDA
#  define _LIBCUDAFORDALICXX_END_NAMESPACE_CUDA } }
#endif

#ifndef _LIBCUDAFORDALICXX_BEGIN_NAMESPACE_CUDA_DEVICE
#  define _LIBCUDAFORDALICXX_BEGIN_NAMESPACE_CUDA_DEVICE \
     namespace cuda_for_dali { namespace device { inline namespace _LIBCUDAFORDALICXX_CUDA_ABI_NAMESPACE {
#endif
#ifndef _LIBCUDAFORDALICXX_END_NAMESPACE_CUDA_DEVICE
#  define _LIBCUDAFORDALICXX_END_NAMESPACE_CUDA_DEVICE } } }
#endif

// redefine namespace std::
#undef _LIBCUDAFORDALICXX_BEGIN_NAMESPACE_STD
#define _LIBCUDAFORDALICXX_BEGIN_NAMESPACE_STD \
   namespace cuda_for_dali { namespace std { inline namespace _LIBCUDAFORDALICXX_CUDA_ABI_NAMESPACE {

#undef _LIBCUDAFORDALICXX_END_NAMESPACE_STD
#define _LIBCUDAFORDALICXX_END_NAMESPACE_STD } } }

#undef _CUDA_FOR_DALI_VSTD
#define _CUDA_FOR_DALI_VSTD cuda_for_dali::std::_LIBCUDAFORDALICXX_CUDA_ABI_NAMESPACE

#undef _LIBCUDAFORDALICXX_BEGIN_NAMESPACE_STD_NOVERSION
#define _LIBCUDAFORDALICXX_BEGIN_NAMESPACE_STD_NOVERSION namespace cuda_for_dali { namespace std {
#undef _LIBCUDAFORDALICXX_END_NAMESPACE_STD_NOVERSION
#define _LIBCUDAFORDALICXX_END_NAMESPACE_STD_NOVERSION } }

#endif //__cuda_for_dali_std__
